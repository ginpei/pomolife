{"version":3,"sources":["models/Clock.ts","models/Task.ts","complexes/TimerConsole.tsx","models/Activity.ts","basics/ActivityFeelingIcon.tsx","simples/TimerActivityItem.tsx","simples/TimerForm.tsx","screens/TimerPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["numHourlySprints","Number","window","g_params","sprints","useClock","useState","now","setNow","useEffect","tm","setInterval","Date","clearTimeout","getSprintTimes","sprintPeriod","d","setSeconds","setMilliseconds","min","getMinutes","setMinutes","dEnd","getTime","toSprintTime","hh","to2digits","getHours","mm","n","Error","integer","Math","floor","dummyTasks","emoji","id","label","tasks","Array","from","length","v","i","random","String","noneTask","settingsTask","TimerConsole","currentTask","onSelect","tracking","dStart","remaining","className","data-active","ms","s","ceil","m","toReadableElapse","active","onClick","task","map","key","isSystem","TaskButton","props","data-system","role","aria-label","RunningIndicator","on","data-on","Object","freeze","bad","good","great","dummyActivitySource","doneAt","elapse","feeling","title","dummyActivities","_","sourceIndex","source","sort","a","b","ActivityFeelingIcon","TimerActivityItem","activity","selected","data-selected","TimerForm","type","placeholder","TimerPage","Audio","bell","setCurrentTask","Activity","activityLog","setActivityLog","editingActivity","setEditingActivityValue","setEditingActivity","setTimeout","callback","curPeriod","setCurPeriod","tEnd","lastPeriod","useBeyondSprintEffect","currentTime","play","latestActivity","push","onActivityClick","pause","FeelingPopup","visible","onFeelingClick","data-visible","FeelingButton","text","App","Boolean","location","hostname","match","search","slice","split","reduce","o","q","k","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d858437e.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst numHourlySprints = Number((window as any).g_params?.sprints) || 2;\n\n/**\n * @example\n * const [now] = useClock();\n */\nexport function useClock() {\n  const [now, setNow] = useState(0);\n\n  useEffect(() => {\n    const tm = window.setInterval(() => setNow(Date.now()), 100);\n    return () => window.clearTimeout(tm);\n  }, []);\n\n  return [now];\n}\n\nexport function useBeyondSprintEffect(\n  callback: (lastPeriod: number, period: number) => void,\n) {\n  const [now] =  useClock();\n  const [curPeriod, setCurPeriod] = useState(0);\n  const [, dEnd] = getSprintTimes(now);\n\n  const tEnd = dEnd.getTime();\n  if (now !== 0 && tEnd !== curPeriod) {\n    const lastPeriod = curPeriod;\n    setCurPeriod(tEnd);\n\n    const initial = lastPeriod === 0;\n    if (!initial) {\n      callback(lastPeriod, tEnd);\n    }\n  }\n}\n\nexport function getSprintTimes(now: number): [Date, Date] {\n  const sprintPeriod = 60 / numHourlySprints; // in min\n\n  const d = new Date(now);\n  d.setSeconds(0);\n  d.setMilliseconds(0);\n\n  const min = d.getMinutes();\n  d.setMinutes(min - min % sprintPeriod);\n\n  const dEnd = new Date(d.getTime() + sprintPeriod * 1000 * 60);\n\n  return [d, dEnd];\n}\n\n/**\n * Returns remaining time in human readable style.\n * @example\n * toReadableElapse(30 * 1000); // => '30 sec'\n * toReadableElapse(30 * 1000 * 60); // => '30 min'\n */\nexport function toReadableElapse(ms: number): string {\n  const s = Math.ceil(ms / 1000);\n  if (s < 60) {\n    return `${s} sec`;\n  }\n\n  const m = Math.ceil(s / 60);\n  return `${m} min`;\n}\n\nexport function toSprintTime(d: Date): string {\n  const hh = to2digits(d.getHours());\n  const mm = to2digits(d.getMinutes());\n  return `${hh}:${mm}`;\n}\n\nfunction to2digits(n: number) {\n  if (n < 0 || 100 <= n) {\n    throw new Error('Number must be equal to or more than zero, and less than 100');\n  }\n\n  const integer = Math.floor(n);\n\n  if (n < 10) {\n    return `0${integer}`;\n  }\n\n  return `${integer}`\n}\n","export type TomatoTask = {\n  emoji: string;\n  id: string;\n  label: string;\n}\n\nexport const dummyTasks: TomatoTask[] = [\n  {\n    emoji: '😎',\n    id: '',\n    label: 'Working',\n  },\n  {\n    emoji: '🎮',\n    id: '',\n    label: 'Having fun',\n  },\n  {\n    emoji: '🏃🏽',\n    id: '',\n    label: 'Exercising',\n  },\n  {\n    emoji: '🍵',\n    id: '',\n    label: 'Having break',\n  },\n];\n\nexport const tasks: TomatoTask[] = Array.from({ length: 9 }, (v, i) => ({\n  ...(dummyTasks[Math.floor(Math.random() * dummyTasks.length)]),\n  id: String(i),\n}));\n\nexport const noneTask: TomatoTask = {\n  emoji: '⏸️',\n  id: 'none',\n  label: '(None)',\n};\n\nexport const settingsTask: TomatoTask = {\n  emoji: '⚙',\n  id: 'setting',\n  label: 'Settings',\n};\n","import React from 'react';\nimport { getSprintTimes, toReadableElapse, toSprintTime, useClock } from '../models/Clock';\nimport { noneTask, settingsTask, tasks, TomatoTask } from '../models/Task';\nimport './TimerConsole.scss';\n\nexport const TimerConsole: React.FC<{\n  currentTask: TomatoTask;\n  onSelect: (task: TomatoTask) => void;\n}> = ({ currentTask, onSelect }) => {\n  const tracking = currentTask !== noneTask;\n\n  const [now] = useClock();\n\n  const [dStart, dEnd] = getSprintTimes(now);\n  const remaining = dEnd.getTime() - now;\n\n  return (\n    <div className=\"TimerConsole ui-container\">\n      <h1 className=\"TimerConsole-heading ui-center\">Current Sprint</h1>\n      <div className=\"TimerConsole-clock ui-center\">\n        {toSprintTime(dStart)} - {toSprintTime(dEnd)}\n      </div>\n      <div className=\"TimerConsole-remaining ui-center\" data-active={tracking}>\n        {toReadableElapse(remaining)}\n        <RunningIndicator now={now} />\n      </div>\n      <div className=\"TimerConsole-taskList\">\n        <TaskButton\n          active={noneTask === currentTask}\n          onClick={onSelect}\n          task={noneTask}\n        />\n        {tasks.map((task) => (\n          <TaskButton\n            active={task === currentTask}\n            key={task.id}\n            onClick={onSelect}\n            task={task}\n          />\n        ))}\n        <TaskButton\n          active={false}\n          onClick={onSelect}\n          isSystem={true}\n          task={settingsTask}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst TaskButton: React.FC<{\n  active: boolean;\n  onClick: (task: TomatoTask) => void;\n  isSystem?: boolean;\n  task: TomatoTask;\n}> = (props) => {\n  const { isSystem = false, task } = props;\n\n  const onClick = () => props.onClick(task);\n\n  return (\n    <button\n      className=\"TimerConsole-TaskButton\"\n      data-active={props.active}\n      data-system={isSystem}\n      onClick={onClick}\n    >\n      <span role=\"img\" aria-label=\"\">{task.emoji}</span>\n      <span className=\"TimerConsole-TaskButton-label\">{task.label}</span>\n    </button>\n  );\n};\n\nconst RunningIndicator: React.FC<{ now: number }> = ({ now }) => {\n  const on = now !== 0 && now % 1000 < 500;\n\n  return (\n    <span\n      className=\"TimerConsole-RunningIndicator\"\n      data-on={on}\n    >\n      .\n    </span>\n  );\n};\n","export type Activity = {\n  doneAt: number;\n  elapse: number;\n  feeling: ActivityFeeling;\n  title: string;\n}\n\nexport const ActivityFeeling = Object.freeze({\n  '': '',\n  bad: 'bad',\n  good: 'good',\n  great: 'great',\n});\n\nexport type ActivityFeeling = keyof typeof ActivityFeeling;\n\nexport function getNewActivity(): Activity {\n  return {\n    doneAt: 0,\n    elapse: 0,\n    feeling: '',\n    title: '',\n  }\n}\n\nexport function getEmoji(feeling: ActivityFeeling) {\n  if (feeling === 'great') {\n    return '😄';\n  }\n\n  if (feeling === 'good') {\n    return '🙂';\n  }\n\n  if (feeling === 'bad') {\n    return '😰';\n  }\n\n  return '';\n}\n\nexport function setDone(activity: Activity, now = Date.now()) {\n  activity.doneAt = now;\n}\n\n\nconst dummyActivitySource: Activity[] = [\n  {\n    doneAt: new Date('2020/04/14 12:00:00.0000Z').getTime(),\n    elapse: 25 * 1000 * 60,\n    feeling: 'great',\n    title: 'hoge',\n  },\n  {\n    doneAt: new Date('2020/04/14 12:25:00.0000Z').getTime(),\n    elapse: 25 * 1000 * 60,\n    feeling: 'good',\n    title: 'fuga',\n  },\n  {\n    doneAt: new Date('2020/04/14 12:50:00.0000Z').getTime(),\n    elapse: 25 * 1000 * 60,\n    feeling: 'bad',\n    title: 'ugh',\n  },\n];\n\nexport const dummyActivities: Activity[] = Array.from(\n  { length: 30 },\n  (_, i) => {\n    const h24 = 24 * 1000 * 60 * 60;\n    const sourceIndex = Math.floor(Math.random() * dummyActivitySource.length);\n    const source = dummyActivitySource[sourceIndex];\n    const item: Activity = {\n      ...source,\n      doneAt: source.doneAt + Math.floor(Math.random() * h24),\n    };\n    return item;\n  },\n).sort((a, b) => a.doneAt - b.doneAt);\n","import React from 'react';\nimport { ActivityFeeling } from '../models/Activity';\n\nexport const ActivityFeelingIcon: React.FC<{\n  feeling: ActivityFeeling;\n}> = ({ feeling }) => {\n  if (feeling === 'great') {\n    return (<>😄</>);\n  }\n\n  if (feeling === 'good') {\n    return (<>🙂</>);\n  }\n\n  if (feeling === 'bad') {\n    return (<>😰</>);\n  }\n\n  return null;\n};\n","import React from 'react';\nimport { ActivityFeelingIcon } from '../basics/ActivityFeelingIcon';\nimport { Activity } from '../models/Activity';\nimport './TimerActivityItem.scss';\n\nexport const TimerActivityItem: React.FC<{\n  activity: Activity;\n  onClick: (activity: Activity) => void;\n  selected: boolean;\n}> = ({ activity, onClick, selected }) => {\n  const onItemClick = () => onClick(activity);\n\n  return (\n    <article\n      className=\"TimerActivityItem\"\n      data-selected={selected}\n      onClick={onItemClick}\n    >\n      <div className=\"TimerActivityItem-container ui-container\">\n        <span className=\"TimerActivityItem-feeling\">\n          <ActivityFeelingIcon feeling={activity.feeling} />\n        </span>\n        <h1 className=\"TimerActivityItem-title\">\n          {activity.title}\n        </h1>\n        <span className=\"TimerActivityItem-settings\">\n          ⚙\n        </span>\n      </div>\n    </article>\n  );\n};\n","import React from 'react';\nimport './TimerForm.scss';\n\nexport const TimerForm: React.FC<{\n}> = (props) => {\n  return (\n    <div className=\"TimerForm\">\n      <div className=\"TimerForm-portForm\">\n        <input\n          type=\"text\"\n          className=\"TimerForm-title\"\n          placeholder=\"(e.g. Homework, Game, Exercise)\"\n        />\n        <button className=\"TimerForm-buttons\">\n          Add\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TimerConsole } from '../complexes/TimerConsole';\nimport * as Activity from '../models/Activity';\nimport { useBeyondSprintEffect } from '../models/Clock';\nimport { noneTask, settingsTask, TomatoTask } from '../models/Task';\nimport { TimerActivityItem } from '../simples/TimerActivityItem';\nimport { TimerForm } from '../simples/TimerForm';\nimport './TimerPage.scss';\n\nexport const TimerPage: React.FC = () => {\n  const url = '/D0002070098_00000_A_001.m4a';\n  const [bell] = useState(new Audio(url));\n  const [currentTask, setCurrentTask] = useState(noneTask);\n  const [activityLog, setActivityLog] = useState<Activity.Activity[]>(Activity.dummyActivities);\n  const [editingActivity, setEditingActivityValue] = useState<Activity.Activity | null>(null);\n\n  const setEditingActivity: typeof setEditingActivityValue = (activity) => {\n    if (editingActivity && activity) {\n      setEditingActivityValue(null);\n\n      // omit timing conflict as it should be OK...\n      window.setTimeout(() => setEditingActivityValue(activity), 100);\n    } else {\n      setEditingActivityValue(activity);\n    }\n  };\n\n  useBeyondSprintEffect((lastPeriod) => {\n    // do nothing if not tracking\n    if (currentTask === noneTask) {\n      return;\n    }\n\n    // sound\n    bell.currentTime = 0;\n    bell.play();\n\n    // add a new activity\n    const latestActivity: Activity.Activity = {\n      doneAt: lastPeriod,\n      elapse: 0,\n      feeling: '',\n      title: currentTask.label,\n    };\n    activityLog.push(latestActivity);\n    setActivityLog(activityLog);\n\n    // open activity edit popup\n    setEditingActivity(latestActivity);\n  });\n\n  const onTaskSelect = (task: TomatoTask) => {\n    if (task === settingsTask) {\n      return;\n    }\n\n    setCurrentTask(task);\n  };\n\n  const onActivityClick = (activity: Activity.Activity) => {\n    if (editingActivity === activity) {\n      setEditingActivity(null);\n    } else {\n      setEditingActivity(activity);\n    }\n  };\n\n  const onLastFeelingSelect = (activity: Activity.Activity, feeling: Activity.ActivityFeeling | null) => {\n    bell.pause();\n\n    if (activity && feeling !== null) {\n      activity.feeling = feeling;\n      setActivityLog(activityLog);\n    }\n\n    setEditingActivity(null);\n  };\n\n  return (\n    <div className=\"TimerPage\">\n      <header className=\"TimerPage-header\">\n        <TimerConsole\n          currentTask={currentTask}\n          onSelect={onTaskSelect}\n        />\n      </header>\n      <div className=\"TimerPage-body\">\n        <div className=\"TimerPage-activityList\">\n          {activityLog.map((activity) => (\n            <TimerActivityItem\n              activity={activity}\n              key={activity.doneAt}\n              onClick={onActivityClick}\n              selected={activity === editingActivity}\n            />\n          ))}\n        </div>\n      </div>\n      <footer className=\"TimerPage-footer\">\n        <div className=\"ui-container\">\n          <TimerForm />\n        </div>\n      </footer>\n      <FeelingPopup\n        activity={editingActivity}\n        onSelect={onLastFeelingSelect}\n      />\n    </div>\n  );\n};\n\nconst FeelingPopup: React.FC<{\n  activity: Activity.Activity | null;\n  onSelect: (activity: Activity.Activity, feeling: Activity.ActivityFeeling | null) => void;\n}> = ({ activity, onSelect }) => {\n  const feelings: Activity.ActivityFeeling[] = ['great', 'good', 'bad'];\n\n  const visible = activity !== null;\n\n  const onDismissClick = () => onSelect(activity!, null);\n  const onFeelingClick = (feeling: Activity.ActivityFeeling) => onSelect(activity!, feeling);\n\n  return (\n    <div className=\"TimerPage-FeelingPopup\" data-visible={visible}>\n      <div className=\"ui-container\">\n        <div className=\"TimerPage-FeelingPopup-inner\">\n          <div\n            className=\"TimerPage-FeelingPopup-dismiss\"\n            onClick={onDismissClick}\n          >\n            ×\n          </div>\n          <h1 className=\"TimerPage-FeelingPopup-heading\">\n            <span role=\"img\" aria-label=\"\">🔔</span>\n            {' '}\n            How was the sprint?\n          </h1>\n          <div className=\"TimerPage-FeelingPopup-feelingList\">\n            {feelings.map((feeling) => (\n              <FeelingButton\n                feeling={feeling}\n                key={feeling}\n                onClick={onFeelingClick}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst FeelingButton: React.FC<{\n  feeling: Activity.ActivityFeeling;\n  onClick: (feeling: Activity.ActivityFeeling) => void;\n}> = ({ feeling, onClick }) => {\n  const emoji = Activity.getEmoji(feeling);\n\n  let text;\n  if (feeling === 'great') {\n    text = 'Great!';\n  } else if (feeling === 'good') {\n    text = 'Good'\n  } else if (feeling === 'bad') {\n    text = 'Bad...'\n  }\n\n  const onButtonClick = () => onClick(feeling);\n\n  return (\n    <button className=\"TimerPage-FeelingButton\" onClick={onButtonClick}>\n      {emoji}\n      <br/>\n      {text}\n    </button>\n  );\n};\n","import React from 'react';\nimport { TimerPage } from './screens/TimerPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TimerPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\n// TODO make this better somehow\n(window as any).g_params = window.location.search.slice(1)\n  .split('&')\n  .reduce((o: any, q) => {\n    const [k, v] = q.split('=');\n    o[k] = v;\n    return o;\n  }, {})\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}